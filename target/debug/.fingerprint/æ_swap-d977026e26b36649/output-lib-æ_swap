{"message":"unused import: `near_contract_standards::fungible_token::receiver::FungibleTokenReceiver`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"contracts/æ_swap/src/lib.rs","byte_start":61,"byte_end":133,"line_start":2,"line_end":2,"column_start":5,"column_end":77,"is_primary":true,"text":[{"text":"use near_contract_standards::fungible_token::receiver::FungibleTokenReceiver;","highlight_start":5,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"contracts/æ_swap/src/lib.rs","byte_start":57,"byte_end":134,"line_start":2,"line_end":2,"column_start":1,"column_end":78,"is_primary":true,"text":[{"text":"use near_contract_standards::fungible_token::receiver::FungibleTokenReceiver;","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `near_contract_standards::fungible_token::receiver::FungibleTokenReceiver`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/æ_swap/src/lib.rs:2:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse near_contract_standards::fungible_token::receiver::FungibleTokenReceiver;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"unused imports: `Gas`, `PromiseOrValue`, `PromiseResult`, `assert_one_yocto`, `serde_json`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"contracts/æ_swap/src/lib.rs","byte_start":354,"byte_end":370,"line_start":8,"line_end":8,"column_start":5,"column_end":21,"is_primary":true,"text":[{"text":"    assert_one_yocto, env, ext_contract, log, near_bindgen, require, serde_json, AccountId,","highlight_start":5,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/æ_swap/src/lib.rs","byte_start":419,"byte_end":429,"line_start":8,"line_end":8,"column_start":70,"column_end":80,"is_primary":true,"text":[{"text":"    assert_one_yocto, env, ext_contract, log, near_bindgen, require, serde_json, AccountId,","highlight_start":70,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/æ_swap/src/lib.rs","byte_start":455,"byte_end":458,"line_start":9,"line_end":9,"column_start":14,"column_end":17,"is_primary":true,"text":[{"text":"    Balance, Gas, PanicOnDefault, Promise, PromiseOrValue, PromiseResult,","highlight_start":14,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/æ_swap/src/lib.rs","byte_start":485,"byte_end":499,"line_start":9,"line_end":9,"column_start":44,"column_end":58,"is_primary":true,"text":[{"text":"    Balance, Gas, PanicOnDefault, Promise, PromiseOrValue, PromiseResult,","highlight_start":44,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/æ_swap/src/lib.rs","byte_start":501,"byte_end":514,"line_start":9,"line_end":9,"column_start":60,"column_end":73,"is_primary":true,"text":[{"text":"    Balance, Gas, PanicOnDefault, Promise, PromiseOrValue, PromiseResult,","highlight_start":60,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"contracts/æ_swap/src/lib.rs","byte_start":354,"byte_end":372,"line_start":8,"line_end":8,"column_start":5,"column_end":23,"is_primary":true,"text":[{"text":"    assert_one_yocto, env, ext_contract, log, near_bindgen, require, serde_json, AccountId,","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"contracts/æ_swap/src/lib.rs","byte_start":417,"byte_end":429,"line_start":8,"line_end":8,"column_start":68,"column_end":80,"is_primary":true,"text":[{"text":"    assert_one_yocto, env, ext_contract, log, near_bindgen, require, serde_json, AccountId,","highlight_start":68,"highlight_end":80}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"contracts/æ_swap/src/lib.rs","byte_start":453,"byte_end":458,"line_start":9,"line_end":9,"column_start":12,"column_end":17,"is_primary":true,"text":[{"text":"    Balance, Gas, PanicOnDefault, Promise, PromiseOrValue, PromiseResult,","highlight_start":12,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"contracts/æ_swap/src/lib.rs","byte_start":483,"byte_end":514,"line_start":9,"line_end":9,"column_start":42,"column_end":73,"is_primary":true,"text":[{"text":"    Balance, Gas, PanicOnDefault, Promise, PromiseOrValue, PromiseResult,","highlight_start":42,"highlight_end":73}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `Gas`, `PromiseOrValue`, `PromiseResult`, `assert_one_yocto`, `serde_json`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/æ_swap/src/lib.rs:8:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    assert_one_yocto, env, ext_contract, log, near_bindgen, require, serde_json, AccountId,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    Balance, Gas, PanicOnDefault, Promise, PromiseOrValue, PromiseResult,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/æ_swap/src/lib.rs","byte_start":9113,"byte_end":9132,"line_start":227,"line_end":227,"column_start":17,"column_end":36,"is_primary":true,"text":[{"text":"                liquidity_per_token,","highlight_start":17,"highlight_end":36}],"label":"expected `f64`, found `u128`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected struct `std::collections::HashMap<_, f64>`\n   found struct `std::collections::HashMap<_, u128>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/æ_swap/src/lib.rs:227:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m227\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                liquidity_per_token,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `f64`, found `u128`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected struct `std::collections::HashMap<_, \u001b[0m\u001b[0m\u001b[1mf64\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m               found struct `std::collections::HashMap<_, \u001b[0m\u001b[0m\u001b[1mu128\u001b[0m\u001b[0m>`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/æ_swap/src/lib.rs","byte_start":14806,"byte_end":14843,"line_start":355,"line_end":355,"column_start":43,"column_end":80,"is_primary":true,"text":[{"text":"            .insert(aex_contract.clone(), prev_aex_liquidity + equivalent_aex.0);","highlight_start":43,"highlight_end":80}],"label":"expected `f64`, found `u128`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"you can cast a `u128` to an `f64`, producing the floating point representation of the integer, rounded if necessary","code":null,"level":"help","spans":[{"file_name":"contracts/æ_swap/src/lib.rs","byte_start":14806,"byte_end":14806,"line_start":355,"line_end":355,"column_start":43,"column_end":43,"is_primary":true,"text":[{"text":"            .insert(aex_contract.clone(), prev_aex_liquidity + equivalent_aex.0);","highlight_start":43,"highlight_end":43}],"label":null,"suggested_replacement":"(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"contracts/æ_swap/src/lib.rs","byte_start":14843,"byte_end":14843,"line_start":355,"line_end":355,"column_start":80,"column_end":80,"is_primary":true,"text":[{"text":"            .insert(aex_contract.clone(), prev_aex_liquidity + equivalent_aex.0);","highlight_start":80,"highlight_end":80}],"label":null,"suggested_replacement":") as f64","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/æ_swap/src/lib.rs:355:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m355\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            .insert(aex_contract.clone(), prev_aex_liquidity + equivalent_aex.0);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `f64`, found `u128`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you can cast a `u128` to an `f64`, producing the floating point representation of the integer, rounded if necessary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m355\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            .insert(aex_contract.clone(), \u001b[0m\u001b[0m\u001b[38;5;10m(\u001b[0m\u001b[0mprev_aex_liquidity + equivalent_aex.0\u001b[0m\u001b[0m\u001b[38;5;10m) as f64\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[38;5;10m++++++++\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/æ_swap/src/lib.rs","byte_start":15067,"byte_end":15097,"line_start":360,"line_end":360,"column_start":39,"column_end":69,"is_primary":true,"text":[{"text":"            .insert(token_id.clone(), prev_token_liquidity + _amount);","highlight_start":39,"highlight_end":69}],"label":"expected `f64`, found `u128`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"you can cast a `u128` to an `f64`, producing the floating point representation of the integer, rounded if necessary","code":null,"level":"help","spans":[{"file_name":"contracts/æ_swap/src/lib.rs","byte_start":15067,"byte_end":15067,"line_start":360,"line_end":360,"column_start":39,"column_end":39,"is_primary":true,"text":[{"text":"            .insert(token_id.clone(), prev_token_liquidity + _amount);","highlight_start":39,"highlight_end":39}],"label":null,"suggested_replacement":"(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"contracts/æ_swap/src/lib.rs","byte_start":15097,"byte_end":15097,"line_start":360,"line_end":360,"column_start":69,"column_end":69,"is_primary":true,"text":[{"text":"            .insert(token_id.clone(), prev_token_liquidity + _amount);","highlight_start":69,"highlight_end":69}],"label":null,"suggested_replacement":") as f64","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/æ_swap/src/lib.rs:360:39\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m360\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            .insert(token_id.clone(), prev_token_liquidity + _amount);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `f64`, found `u128`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you can cast a `u128` to an `f64`, producing the floating point representation of the integer, rounded if necessary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m360\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            .insert(token_id.clone(), \u001b[0m\u001b[0m\u001b[38;5;10m(\u001b[0m\u001b[0mprev_token_liquidity + _amount\u001b[0m\u001b[0m\u001b[38;5;10m) as f64\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[38;5;10m++++++++\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/æ_swap/src/lib.rs","byte_start":21910,"byte_end":21959,"line_start":515,"line_end":515,"column_start":13,"column_end":62,"is_primary":true,"text":[{"text":"            prev_first_token_liquidity + first_token_amount.0,","highlight_start":13,"highlight_end":62}],"label":"expected `f64`, found `u128`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"you can cast a `u128` to an `f64`, producing the floating point representation of the integer, rounded if necessary","code":null,"level":"help","spans":[{"file_name":"contracts/æ_swap/src/lib.rs","byte_start":21910,"byte_end":21910,"line_start":515,"line_end":515,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"            prev_first_token_liquidity + first_token_amount.0,","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"contracts/æ_swap/src/lib.rs","byte_start":21959,"byte_end":21959,"line_start":515,"line_end":515,"column_start":62,"column_end":62,"is_primary":true,"text":[{"text":"            prev_first_token_liquidity + first_token_amount.0,","highlight_start":62,"highlight_end":62}],"label":null,"suggested_replacement":") as f64","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/æ_swap/src/lib.rs:515:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m515\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            prev_first_token_liquidity + first_token_amount.0,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `f64`, found `u128`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you can cast a `u128` to an `f64`, producing the floating point representation of the integer, rounded if necessary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m515\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[38;5;10m(\u001b[0m\u001b[0mprev_first_token_liquidity + first_token_amount.0\u001b[0m\u001b[0m\u001b[38;5;10m) as f64\u001b[0m\u001b[0m,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[38;5;10m++++++++\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/æ_swap/src/lib.rs","byte_start":22202,"byte_end":22253,"line_start":523,"line_end":523,"column_start":13,"column_end":64,"is_primary":true,"text":[{"text":"            prev_second_token_liquidity + second_token_amount.0,","highlight_start":13,"highlight_end":64}],"label":"expected `f64`, found `u128`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"you can cast a `u128` to an `f64`, producing the floating point representation of the integer, rounded if necessary","code":null,"level":"help","spans":[{"file_name":"contracts/æ_swap/src/lib.rs","byte_start":22202,"byte_end":22202,"line_start":523,"line_end":523,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"            prev_second_token_liquidity + second_token_amount.0,","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"contracts/æ_swap/src/lib.rs","byte_start":22253,"byte_end":22253,"line_start":523,"line_end":523,"column_start":64,"column_end":64,"is_primary":true,"text":[{"text":"            prev_second_token_liquidity + second_token_amount.0,","highlight_start":64,"highlight_end":64}],"label":null,"suggested_replacement":") as f64","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/æ_swap/src/lib.rs:523:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m523\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            prev_second_token_liquidity + second_token_amount.0,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `f64`, found `u128`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you can cast a `u128` to an `f64`, producing the floating point representation of the integer, rounded if necessary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m523\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[38;5;10m(\u001b[0m\u001b[0mprev_second_token_liquidity + second_token_amount.0\u001b[0m\u001b[0m\u001b[38;5;10m) as f64\u001b[0m\u001b[0m,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[38;5;10m++++++++\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/æ_swap/src/lib.rs","byte_start":26460,"byte_end":26614,"line_start":621,"line_end":624,"column_start":9,"column_end":88,"is_primary":true,"text":[{"text":"        *pool","highlight_start":9,"highlight_end":14},{"text":"            .liquidity_per_token","highlight_start":1,"highlight_end":33},{"text":"            .get(&token_id)","highlight_start":1,"highlight_end":28},{"text":"            .unwrap_or_else(|| env::panic_str(\"Selected Token not found in this pool\"))","highlight_start":1,"highlight_end":88}],"label":"expected `u128`, found `f64`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/æ_swap/src/lib.rs","byte_start":26250,"byte_end":26257,"line_start":615,"line_end":615,"column_start":67,"column_end":74,"is_primary":false,"text":[{"text":"    fn get_liquidity(&self, pool_id: u32, token_id: AccountId) -> Balance {","highlight_start":67,"highlight_end":74}],"label":"expected `u128` because of return type","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/æ_swap/src/lib.rs:621:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m615\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m    fn get_liquidity(&self, pool_id: u32, token_id: AccountId) -> Balance {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mexpected `u128` because of return type\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m621\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        *pool\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m622\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .liquidity_per_token\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m623\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .get(&token_id)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m624\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .unwrap_or_else(|| env::panic_str(\"Selected Token not found in this pool\"))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_______________________________________________________________________________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `u128`, found `f64`\u001b[0m\n\n"}
{"message":"aborting due to 6 previous errors; 2 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 6 previous errors; 2 warnings emitted\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0308`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0308`.\u001b[0m\n"}
